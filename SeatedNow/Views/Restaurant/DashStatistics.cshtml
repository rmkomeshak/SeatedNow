@model DashStats
@{
    var restaurant = Model.Restaurant;
    var other = Model.OtherRestaurants;
    List<RestaurantRatings> ratings = Model.Restaurant.Ratings;
    List<RestaurantTableList> tables = Model.Restaurant.Tables.ToList();

    Predicate<RestaurantTableList> taken = delegate (RestaurantTableList table) { return table.IsTaken; };
    tables.RemoveAll(taken);
    var free = tables.Count();
    var inUse = Model.Restaurant.Tables.Count() - free;

    string urlBase = "https://seatednow.blob.core.windows.net/seatednow/";
    string urlRestaurantLogo = Model.Restaurant.Id + Model.Restaurant.Name + "Logo.png";
    string urlFullLogo = urlBase + urlRestaurantLogo;
}
<h2 class="display-4" style="font-size: 40px;">@restaurant.Name Information</h2>
<div class="container">
    <div class="row" style="margin-top:5%;">
        <div class="col-6">
            <h3 style="margin-bottom:5%;">Basic Statistics</h3>
            <div style="clear:both;">
                <h5 style="float:left;"><i class="fas fa-male"></i> &nbsp;&nbsp; Current Customers:</h5>
                <h5 style="float:right; margin-right:35%;">@Model.Restaurant.Stats.Customers</h5>
            </div>
            <div style="clear:both;">
                <h5 style="float:left;"><i class="fas fa-check"></i> &nbsp;&nbsp; Free Tables:</h5>
                <h5 style="float:right; margin-right:35%;">@free</h5>
            </div>
            <div style="clear:both;">
                <h5 style="float:left;"><i class="fas fa-times"></i> &nbsp;&nbsp; Taken Tables:</h5>
                <h5 style="float:right; margin-right:35%;">@inUse</h5>
            </div>
            <div style="clear:both;">
                <h5 style="float:left;"><i class="far fa-clock"></i> &nbsp;&nbsp; Wait Time:</h5>
                <h5 style="float:right; margin-right:35%;">@Model.Restaurant.Stats.WaitTime min</h5>
            </div>
            <div style="clear:both;">
                <h5 style="float:left;"><i class="far fa-address-book"></i> &nbsp;&nbsp; Reservations:</h5>
                <h5 style="float:right; margin-right:35%;">@Model.Restaurant.Stats.Reservations</h5>
            </div>




        </div>

    @{
        var avg = 0;
        foreach (var r in other)
        {
            if (r.ID != restaurant.Id)
            {
                avg += r.Stats.WaitTime;
            }
        }

        avg = avg / other.Count;
    }
    <div class="col-6">
    <h3>Recent Reviews</h3>
    @if (Model.Restaurant.Stats.TotalRatings > 0)
    {
        <p><i class="fas fa-star"></i><span id="restaurant-rating"><b>@Math.Round(Model.Restaurant.Stats.Rating, 1) stars</b> based on @Model.Restaurant.Stats.TotalRatings reviews</span></p>
    }
    else
    {
        <p style="margin-top: 50px;"><i class="fas fa-star"></i><span id="restaurant-rating"><b>No Reviews</b></span></p>
    }

    
        @{
            Predicate<RestaurantRatings> isInvalid = delegate (RestaurantRatings rating) { return (rating.Comment.Equals("") || (rating.Comment == null) || rating.Rating <= 0); };
            ratings.RemoveAll(isInvalid);
            ratings.Reverse();
        }

        @foreach (var rating in ratings.Take(5))
        {
            <div class="listing-review">
                <span class="listing-rating">
                    @if (Model.Restaurant.Stats.TotalRatings > 0)
                    {
                        for (int i = 0; i < (int)rating.Rating; i++)
                        {
                            <i class="fas fa-star"></i>
                        }

                        for (int i = 5; i > (int)rating.Rating; i--)
                        {
                            <i class="far fa-star"></i>
                        }
                    }
                    else
                    {
                        <p style="margin-top: 50px;"><a><b>No Reviews</b></a></p>
                    }
                </span>
                <span class="listing-comment">
                    @rating.Comment
                </span>
            </div>

        }
    </div>
    </div>
</div>

<head>
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});

      // Set a callback to run when the Google Visualization API is loaded.
      google.charts.setOnLoadCallback(drawChart);

      // Callback that creates and populates a data table,
      // instantiates the pie chart, passes in the data and
      // draws it.
      function drawChart() {

        // Create the data table.
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Restaurant');
        data.addColumn('number', 'Current Wait Time (minutes)');

        data.addRows([
          ['@restaurant.Name', @restaurant.Stats.WaitTime],
          ['Other (Avg)', @avg]
        ]);

        // Set chart options
        var options = {'title':'Current Wait Times',
                       'width':400,
                       'height': 300,
                       legend: 'none',
                       colors: ['#e6693e']};

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.BarChart(document.getElementById('chart_div'));
        chart.draw(data, options);
      }
    </script>
</head>